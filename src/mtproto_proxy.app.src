{application, mtproto_proxy,
 [{description, "An OTP application"},
  {vsn, "0.1.0"},
  {registered, []},
  {mod, { mtproto_proxy_app, []}},
  {applications,
   [lager,
    ranch,
    crypto,
    ssl,
    inets,
    kernel,
    stdlib
   ]},
  {env,[
        %% Close connection if it failed to perform handshake in this many seconds
        {init_timeout_sec, 60},
        {hibernate_timeout_sec, 60},
        %% Close connection after this many seconds of inactivity
        {ready_timeout_sec, 1200},

        %% Telegram server uses your external IP address as part of encryption
        %% key, so, you should know it.
        %% You can configure IP lookup service by `ip_lookup_service' (should
        %% return my IP address as one line from this URL) or set IP address
        %% statically by `external_ip' (not both).
        %% If both are unset, we will try to guess IP address
        %% from getsockname().
        {ip_lookup_service, "https://digitalresistance.dog/myIp"},
        %% {external_ip, "YOUR.SERVER.EXTERNAL.IP"},

        %% Interface to listen for incoming connections
        {ip, {0, 0, 0, 0}},
        %% You can add as much as you want. Names and ports should be unique
        {ports, [#{name => mtp_handler,
                   port => 666,
                   %% secret should be 32 hex chars [0-9a-f]
                   secret => <<"5cf02f960508b02f18a5f4e05fc31451">>,
                   %% tag is what you get from @MTProxybot
                   tag => <<"4ce0d5cebd934e69eabce8b7bade66a2">>}]},
        {num_acceptors, 60},
        {max_connections, 40960}
       ]},
  {modules, []},

  {maintainers, []},
  {licenses, ["Apache 2.0"]},
  {links, []}
 ]}.
